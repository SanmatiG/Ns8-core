#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import json
import agent, agent.tasks
import os

request = json.load(sys.stdin)
bid = request['id']

rdb = agent.redis_connect()

if not rdb.exists(f"cluster/backup/{bid}"):
    agent.set_status('validation-failed')
    json.dump([{'field':'id', 'parameter':'id','value': bid, 'error':'backup_not_found'}], fp=sys.stdout)
    sys.exit(2)

#
# Remove the backup and all its backward references in module keys
#
ptasks = []
for kbackups in rdb.scan_iter('module/*/backups'):
    if rdb.sismember(kbackups, bid) > 0:
        ptasks.append({
            "agent_id": kbackups.removesuffix('/backups'),
            "action": "run-backup",
            "data": {
                "id": bid,
            },
            "extra": {
                'title': kbackups.removesuffix('/backups') + "/run-backup",
                'description': "run-backup agent action",
                'isNotificationHidden': True,
            }
        })

terrors = agent.tasks.runp_brief(ptasks,
    endpoint="redis://cluster-leader",
    progress_callback=agent.get_progress_callback(2,98)
)
if terrors:
    print(terrors, file=sys.stderr)
    sys.exit(1)
