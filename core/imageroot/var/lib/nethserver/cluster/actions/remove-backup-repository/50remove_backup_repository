#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import json
import agent
import agent.tasks
import os

request = json.load(sys.stdin)
rid = request['id']

rdb = agent.redis_connect(privileged=True)

orepo = rdb.hgetall(f"cluster/backup_repository/{rid}")
if not orepo:
    agent.set_status('validation-failed')
    json.dump([{'field':'id', 'parameter':'id','value': rid, 'error':'backup_repository_not_found'}], fp=sys.stdout)
    sys.exit(2)

trx = rdb.pipeline()

#
# Drop related backup objects
#
ptasks = []
for kbid in rdb.scan_iter('cluster/backup/*'):
    repo_id = rdb.hget(kbid, 'repository')
    if repo_id != rid:
        continue # backup not related, skip

    trx.delete(kbid)
    for kbackups in rdb.scan_iter('module/*/backups'):
        mbid = kbid.removeprefix('cluster/backup/')
        if rdb.srem(kbackups, mbid) > 0:
            ptasks.append({
                "agent_id": kbackups.removesuffix('/backups'),
                "action": "configure-backup",
                "data": {
                    "id": int(mbid),
                    "optype": "remove",
                }
            })

trx.delete(f"cluster/backup_repository/{rid}")
trx.execute()

terrors = agent.tasks.runp_brief(ptasks,
    endpoint="redis://cluster-leader",
    progress_callback=agent.get_progress_callback(25,98)
)
if terrors:
    print(terrors, file=sys.stderr)
    sys.exit(1)