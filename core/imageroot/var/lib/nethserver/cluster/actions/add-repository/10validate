#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import json
import agent
import urllib
import traceback
import jsonschema 
import urllib.request

errors = []

request = json.load(sys.stdin)
rdb = agent.redis_connect(privileged=True)

name = request['name']
url = request['url']

# check for duplicate names
if rdb.hgetall(f'cluster/repository/{name}'):
    errors.append({'field':'name','parameter':'name','value':name,'error':'repository_same_name_already_exists'})

# check for duplicate urls
for m in rdb.scan_iter('cluster/repository/*'):
    if rdb.hget(m, 'url') == url:
        errors.append({'field':'url','parameter':'url','value':url,'error':'repository_same_url_already_exists'})

if errors:
    agent.set_status('validation-failed')
    json.dump(errors, fp=sys.stdout)
    sys.exit(2)

try:
    url = urllib.parse.urljoin(url, "repodata.json")
    with urllib.request.urlopen(url) as req:
        # fail if response is not valid
        if req.status != 200:
            agent.set_status('validation-failed')
            json.dump([{'field':'url','parameter':'url','value':url,'error':'repodata_not_found'}], fp=sys.stdout)
            sys.exit(2)

        # validate repodata against json schema
        try:
            repodata = json.loads(req.read().decode())
        except:
            agent.set_status('validation-failed')
            json.dump([{'field':'url','parameter':'url','value':url,'error':'repodata_is_not_json'}], fp=sys.stdout)
            sys.exit(2)

        with open("/var/lib/nethserver/cluster/repodata-schema.json", 'r') as fp:
            schema = json.load(fp)

        try:
            jsonschema.validate(instance=repodata, schema=schema)
        except:
            agent.set_status('validation-failed')
            json.dump([{'field':'url','parameter':'url','value':url,'error':'repodata_is_not_valid_metadata'}], fp=sys.stdout)
            sys.exit(2)

except:
    # just fail if the URL is not reachable
    agent.set_status('validation-failed')
    json.dump([{'field':'url','parameter':'url','value':url,'error':'repository_not_accessible'}], fp=sys.stdout)
    traceback.print_exc(file=sys.stderr)
    sys.exit(2)

