#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import sys
import json
import agent
import uuid
import hashlib
import node.ports_manager

def save_environment(env):
    with open('state/environment', 'w') as envf:
        for envk, envv in env.items():
            envf.write(f"{envk}={envv}\n")

def save_agent_env(module_id):
    """Generate and persist the Redis password for module_id
    """
    oldmask = os.umask(0o77)
    redis_password = str(uuid.uuid4())
    base_path = os.getcwd()
    with open('state/agent.env', 'w') as agentenv:
        system_path = os.getenv('PATH', '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin')
        agentenv.write(f'PATH={base_path}/bin:{system_path}\n')
        agentenv.write(f'REDIS_USER=module/{module_id}\n')
        agentenv.write(f'REDIS_PASSWORD={redis_password}\n')
        agentenv.write(f'PYTHONPATH={base_path}/pypkg\n')
    os.umask(oldmask)
    return hashlib.sha256(redis_password.encode()).hexdigest()

request = json.load(sys.stdin)
module_id = request['module_id']
is_rootfull = request['is_rootfull']
module_environment = request['environment']
image_url = module_environment['IMAGE_URL']

# Valdate the base homedir path: it must exist.
if 'HOME_BASEDIR' in os.environ and not os.path.isdir(os.environ['HOME_BASEDIR']):
    print(agent.SD_ERR + f"[ERROR] The HOME_BASEDIR path, {os.environ['HOME_BASEDIR']} does not exist or is not a directory.", file=sys.stderr)
    sys.exit(2)

# Allocate TCP ports
if request['tcp_ports_demand'] > 0:
    tcp_ports_range=node.ports_manager.allocate_ports(request['tcp_ports_demand'], module_id, 'tcp')

    module_environment['TCP_PORT'] = f'{tcp_ports_range[0]}' # Always set the first port
    if request['tcp_ports_demand'] > 1: # Multiple ports: always set the ports range variable
        module_environment['TCP_PORTS_RANGE'] = f'{tcp_ports_range[0]}-{tcp_ports_range[1]}'
    if request['tcp_ports_demand'] <= 8: # Few ports: set also a comma-separated list of ports variable
        module_environment['TCP_PORTS'] = ','.join(str(port) for port in range(tcp_ports_range[0], tcp_ports_range[1]+1))

# Allocate UDP ports
if request['udp_ports_demand'] > 0:
    udp_ports_range=node.ports_manager.allocate_ports(request['udp_ports_demand'], module_id, 'udp')

    module_environment['UDP_PORT'] = f'{udp_ports_range[0]}' # Always set the first port
    if request['udp_ports_demand'] > 1: # Multiple ports: always set the ports range variable
        module_environment['UDP_PORTS_RANGE'] = f'{udp_ports_range[0]}-{udp_ports_range[1]}'
    if request['udp_ports_demand'] <= 8: # Few ports: set also a comma-separated list of ports variable
        module_environment['UDP_PORTS'] = ','.join(str(port) for port in range(udp_ports_range[0], udp_ports_range[1]+1))

# Launch the module agent (async)
if is_rootfull:
    # Create the module dirs structure
    os.mkdir(f'/var/lib/nethserver/{module_id}/')
    os.mkdir(f'/var/lib/nethserver/{module_id}/state', mode=0o700)
    # Extract the module imageroot
    os.chdir(f'/var/lib/nethserver/{module_id}')
    save_environment(module_environment)
    redis_sha256 = save_agent_env(module_id)
    agent.run_helper('extract-image', image_url).check_returncode()
    # Refresh Promtail configuration to capture the log of the new module
    agent.run_helper('systemctl', 'try-restart', 'promtail.service').check_returncode()
    # Start the module agent
    agent.run_helper('systemctl', 'enable', '--now', f'agent@{module_id}.service').check_returncode()
else: # rootless
    if 'HOME_BASEDIR' in os.environ:
        # create the home directory with the custom base path
        module_basedir_args = ["-b", os.environ["HOME_BASEDIR"]]
    else:
        # use default base path (see useradd -D)
        module_basedir_args = []
    # Create the module dirs structure
    agent.run_helper('useradd', *module_basedir_args, '-m', '-k', '/etc/nethserver/skel', '-s', '/bin/bash', module_id).check_returncode()
    agent.run_helper('chmod', '-c', '0700', os.path.expanduser("~" + module_id)).check_returncode()
    os.chdir(os.path.expanduser("~" + module_id) + '/.config')
    save_environment(module_environment)
    redis_sha256 = save_agent_env(module_id)
    # Extract the module imageroot and fix CWD permissions recursively
    agent.run_helper('extract-image', image_url).check_returncode()
    # Refresh Promtail configuration to capture the log of the new module
    agent.run_helper('systemctl', 'try-restart', 'promtail.service').check_returncode()
    # Start the module agent
    agent.run_helper('loginctl', 'enable-linger', module_id).check_returncode()

json.dump({
    "redis_sha256":redis_sha256,
}, sys.stdout)
