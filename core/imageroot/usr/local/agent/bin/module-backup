#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import agent
import json
import sys
import os
import os.path
import subprocess
import time
import atexit

backup_status = {'total_size': 0, 'total_file_count': 0, 'snapshots_count': 0, 'errors': 0, 'start': int(time.time())}

backup_id = int(sys.argv[1])
rdb = agent.redis_connect(host='127.0.0.1') # Connect to local replica

obackup = rdb.hgetall(f'cluster/backup/{backup_id}')
agent.assert_exp(len(obackup) > 0) # The backup object must exist
repository = obackup['repository']
module_id = os.environ['MODULE_ID']
install_dir = os.environ['AGENT_INSTALL_DIR']
state_dir = os.environ['AGENT_STATE_DIR']
module_is_rootfull = os.geteuid() == 0
repopath = agent.get_image_name_from_url(os.environ['IMAGE_URL']) + "/" + os.environ['MODULE_UUID']

def exit_handler():
    global module_id, backup_status, backup_id
    wrdb = agent.redis_connect(privileged = True)
    trx = wrdb.pipeline()
    backup_status['end'] = int(time.time())
    trx.delete(f"module/{module_id}/backup_status/{backup_id}")
    trx.hset(f"module/{module_id}/backup_status/{backup_id}", mapping=backup_status)
    trx.publish(f"module/{module_id}/event/backup-status-changed", json.dumps({
        "node_id": int(os.environ["NODE_ID"]),
        "module_id": module_id,
        "backup_id": backup_id,
    }))
    trx.execute()
    wrdb.close()

if obackup['enabled'] != '1':
    print(f"Backup {backup_id} is not enabled, exit now.", file=sys.stderr)
    sys.exit(0)

atexit.register(exit_handler)

# This file is always required by the restore procedure
# See the cluster/restore-module action for details
backup_args = ["state/environment"]

# Dump ui_name key, if exists
if rdb.exists(f'module/{module_id}/ui_name'):
    with open('ui_name.dump', 'wb') as fp:
        dump_p = subprocess.run(["redis-dump", f'module/{module_id}/ui_name'], stdout=fp)
        if dump_p.returncode == 0:
            backup_args.append('state/ui_name.dump')

try:
    subprocess.run(["module-dump-state"] + sys.argv[1:], check=True)
except FileNotFoundError:
    pass
except PermissionError:
    print("[WARNING] module-dump-state is not executable: ignored.", file=sys.stderr)
except Exception as ex:
    print("[ERROR] module-dump-state failed.", ex, file=sys.stderr)
    print("[ERROR] module-backup aborted.", file=sys.stderr)
    backup_status['errors'] += 1
    sys.exit(1)

podman_args = [
    "--workdir=/srv",
    f"--volume={state_dir}:/srv/state", # state directory is always mounted as working directory
]

# Map all module volumes into the restic container
with subprocess.Popen(["podman", "volume", "ls", "--format={{.Name}}"], stdout=subprocess.PIPE, stderr=sys.stderr, text=True, encoding='utf-8') as volumes_reader:
    for svolume in volumes_reader.stdout:
        svolume = svolume.rstrip()

        if svolume.startswith('restic-'):
            continue # skip mounting restic volumes
        elif not module_is_rootfull:
            dvolume = svolume # Rootless volume names are preserved as they are.
        elif svolume.startswith(module_id + '-'):
            dvolume = svolume.removeprefix(module_id + '-') # Rootfull volume names are translated!
        else:
            continue

        podman_args.append(f"--volume={svolume}:/srv/volumes/{dvolume}")

# Configure include pattern list:
if os.path.isfile(install_dir + "/etc/state-include.conf"):
    podman_args.append(f"--volume={install_dir}/etc/state-include.conf:/etc/state-include.conf:ro")
    backup_args.append("--files-from=/etc/state-include.conf")

# Configure exclude pattern list:
if os.path.isfile(install_dir + "/etc/state-exclude.conf"):
    podman_args.append(f"--volume={install_dir}/etc/state-exclude.conf:/etc/state-exclude.conf:ro")
    backup_args.append("--exclude-file=/etc/state-exclude.conf")

# Ensure the restic repository has been initialized
if agent.run_restic(rdb, repository, repopath, [], ["snapshots"], stdout=subprocess.DEVNULL).returncode == 0:
    print(f"Repository {repository} is present at path {repopath}", file=sys.stderr)
else:
    try:
        print(f"Initializing repository {repository} at path {repopath}", file=sys.stderr)
        agent.run_restic(rdb, repository, repopath, [], ["init"]).check_returncode()
    except subprocess.CalledProcessError as ex:
        print("[ERROR] restic init failed.", ex, file=sys.stderr)
        backup_status['errors'] += 1
        sys.exit(1)

agent_progress_callback = agent.get_progress_callback(1, 95)
def backup_progress_callback(omessage):
    global agent_progress_callback
    if omessage['message_type'] == 'status':
        fpercent = float(omessage['percent_done'])
        agent_progress_callback(int(fpercent * 100))

try:
    # Run the backup
    if os.getenv('AGENT_TASK_ID'):
        pbackup = agent.run_restic(rdb, repository, repopath, podman_args, ["backup", "--json"] + backup_args, progress_callback=backup_progress_callback)
        if pbackup.returncode != 0:
            print(agent.SD_ERR + f"Restic restore command failed with exit code {pbackup.returncode}.", file=sys.stderr)
            sys.exit(1)
    else:
        agent.run_restic(rdb, repository, repopath, podman_args, ["backup", "--no-scan"] + backup_args).check_returncode()

    # Apply retention policy
    agent.run_restic(rdb, repository, repopath, [], ["forget", "--prune", "--keep-last=" + obackup['retention']]).check_returncode()

except subprocess.CalledProcessError as ex:
    print("[ERROR] restic backup failed.", ex, file=sys.stderr)
    backup_status['errors'] += 1

# Advertise the backup status
stats_proc = agent.run_restic(rdb, repository, repopath, [], ["stats", "--json", "latest"], text=True, stdout=subprocess.PIPE)
if stats_proc.returncode == 0:
    backup_status.update(json.loads(stats_proc.stdout))
else:
    print("[ERROR] restic stats failed.", file=sys.stderr)
    backup_status['errors'] += 1

try:
    ometa = {}
    ometa["module_id"] = module_id
    ometa["module_ui_name"] = rdb.get(f'module/{module_id}/ui_name') or ""
    ometa["node_fqdn"] = agent.get_hostname()
    ometa["cluster_uuid"] = rdb.get("cluster/uuid") or ""
    ometa["uuid"] = os.environ["MODULE_UUID"]
    ometa["timestamp"] = int(time.time())
    ometa["success"] = bool(backup_status['errors']  == 0)
    subprocess.run(["rclone-wrapper", str(backup_id), "rcat", f"REMOTE_PATH/{repopath}.json"],
        stdout=sys.stderr,
        input='\n' + json.dumps(ometa, separators=(',', ':')) + '\n',
        text=True,
        check=True,
    )
except subprocess.CalledProcessError as ex:
    backup_status['errors'] += 1

try:
    subprocess.run(["module-cleanup-state"] + sys.argv[1:], check=True)
except FileNotFoundError:
    pass
except PermissionError:
    print("[WARNING] module-cleanup-state is not executable: ignored.", file=sys.stderr)
except Exception as ex:
    print("[ERROR] module-cleanup-state failed.", ex, file=sys.stderr)
    backup_status['errors'] += 1

if backup_status['errors'] > 0:
    sys.exit(1)
